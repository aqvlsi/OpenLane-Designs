
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/mem_decode/src/mem_decode.v
Parsing SystemVerilog input from `/openlane/designs/mem_decode/src/mem_decode.v' to AST representation.
Storing AST representation for module `$abstract\mem_decode'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\mem_decode'.
Generating RTLIL representation for module `\mem_decode'.

4.1. Analyzing design hierarchy..
Top module:  \mem_decode

4.2. Analyzing design hierarchy..
Top module:  \mem_decode
Removing unused module `$abstract\mem_decode'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mem_decode/runs/decoder/tmp/synthesis/hierarchy.dot'.
Dumping module mem_decode to page 1.
Renaming module mem_decode to mem_decode.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \mem_decode

7.2. Analyzing design hierarchy..
Top module:  \mem_decode
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mem_decode.$proc$/openlane/designs/mem_decode/src/mem_decode.v:88$37'.

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mem_decode.\ram_ready' using process `\mem_decode.$proc$/openlane/designs/mem_decode/src/mem_decode.v:88$37'.
  created $dff cell `$procdff$42' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `mem_decode.$proc$/openlane/designs/mem_decode/src/mem_decode.v:88$37'.
Cleaned up 0 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module mem_decode...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 21 bits (of 32) from port B of cell mem_decode.$ge$/openlane/designs/mem_decode/src/mem_decode.v:53$1 ($ge).
Removed top 6 bits (of 32) from port B of cell mem_decode.$lt$/openlane/designs/mem_decode/src/mem_decode.v:53$3 ($lt).
Removed top 21 bits (of 32) from port B of cell mem_decode.$lt$/openlane/designs/mem_decode/src/mem_decode.v:58$12 ($lt).
Removed top 7 bits (of 8) from port B of cell mem_decode.$gt$/openlane/designs/mem_decode/src/mem_decode.v:60$14 ($gt).
Removed top 6 bits (of 32) from port B of cell mem_decode.$eq$/openlane/designs/mem_decode/src/mem_decode.v:65$16 ($eq).
Removed top 6 bits (of 32) from port B of cell mem_decode.$eq$/openlane/designs/mem_decode/src/mem_decode.v:69$18 ($eq).
Removed top 6 bits (of 32) from port B of cell mem_decode.$eq$/openlane/designs/mem_decode/src/mem_decode.v:74$20 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mem_decode:
  creating $alu model for $ge$/openlane/designs/mem_decode/src/mem_decode.v:53$1 ($ge): new $alu
  creating $alu model for $gt$/openlane/designs/mem_decode/src/mem_decode.v:60$14 ($gt): new $alu
  creating $alu model for $lt$/openlane/designs/mem_decode/src/mem_decode.v:53$3 ($lt): new $alu
  creating $alu model for $lt$/openlane/designs/mem_decode/src/mem_decode.v:58$12 ($lt): merged with $ge$/openlane/designs/mem_decode/src/mem_decode.v:53$1.
  creating $alu model for $eq$/openlane/designs/mem_decode/src/mem_decode.v:65$16 ($eq): merged with $lt$/openlane/designs/mem_decode/src/mem_decode.v:53$3.
  creating $alu cell for $lt$/openlane/designs/mem_decode/src/mem_decode.v:53$3, $eq$/openlane/designs/mem_decode/src/mem_decode.v:65$16: $auto$alumacc.cc:485:replace_alu$46
  creating $alu cell for $gt$/openlane/designs/mem_decode/src/mem_decode.v:60$14: $auto$alumacc.cc:485:replace_alu$57
  creating $alu cell for $ge$/openlane/designs/mem_decode/src/mem_decode.v:53$1, $lt$/openlane/designs/mem_decode/src/mem_decode.v:58$12: $auto$alumacc.cc:485:replace_alu$62
  created 3 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.
<suppressed ~2 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$a4cd5864316cd4ed9c6832759038dc317198ba73\_90_alu for cells of type $alu.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
Using template $paramod$a54505a20ae3d90601910914642f49e8f9eb7e29\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
No more expansions possible.
<suppressed ~751 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.
<suppressed ~460 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
<suppressed ~507 debug messages>
Removed a total of 169 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 111 unused cells and 325 unused wires.
<suppressed ~112 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\mem_decode' to `<abc-temp-dir>/input.blif'..
Extracted 352 gates and 586 wires to a netlist network with 233 inputs and 49 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOR cells:        5
ABC RESULTS:                OR cells:       57
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               MUX cells:      160
ABC RESULTS:            ANDNOT cells:       54
ABC RESULTS:        internal signals:      304
ABC RESULTS:           input signals:      233
ABC RESULTS:          output signals:       49
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 338 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \mem_decode

42.2. Analyzing design hierarchy..
Top module:  \mem_decode
Removed 0 unused modules.

43. Printing statistics.

=== mem_decode ===

   Number of wires:                279
   Number of wire bits:            666
   Number of public wires:          38
   Number of public wire bits:     425
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                291
     $_ANDNOT_                      54
     $_AND_                          1
     $_DFF_P_                        1
     $_MUX_                        160
     $_NOR_                          5
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          57

44. Executing CHECK pass (checking for obvious problems).
Checking module mem_decode...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mem_decode/runs/decoder/tmp/synthesis/post_techmap.dot'.
Dumping module mem_decode to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mem_decode..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mem_decode.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mem_decode'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mem_decode.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

49. Printing statistics.

=== mem_decode ===

   Number of wires:                276
   Number of wire bits:            663
   Number of public wires:          35
   Number of public wire bits:     422
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                291
     $_ANDNOT_                      54
     $_AND_                          1
     $_DFF_P_                        1
     $_MUX_                        160
     $_NOR_                          5
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          57

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mem_decode':
  mapped 1 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== mem_decode ===

   Number of wires:                276
   Number of wire bits:            663
   Number of public wires:          35
   Number of public wire bits:     422
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                291
     $_ANDNOT_                      54
     $_AND_                          1
     $_MUX_                        160
     $_NOR_                          5
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          57
     sky130_fd_sc_hd__dfxtp_2        1

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\mem_decode' to `/tmp/yosys-abc-LUOpMC/input.blif'..
Extracted 290 gates and 523 wires to a netlist network with 233 inputs and 49 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-LUOpMC/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-LUOpMC/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-LUOpMC/input.blif 
ABC: + read_lib -w /openlane/designs/mem_decode/runs/decoder/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/mem_decode/runs/decoder/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.09 sec
ABC: Memory =    9.54 MB. Time =     0.09 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/mem_decode/runs/decoder/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/mem_decode/runs/decoder/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 100000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 100000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 100000 
ABC: Current delay (2568.00 ps) does not exceed the target delay (100000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 100000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    312 ( 18.3 %)   Cap =  6.9 ff (  4.2 %)   Area =     2516.16 ( 81.7 %)   Delay =  3111.56 ps  (  7.7 %)               
ABC: Path  0 --      15 : 0    1 pi                        A =   0.00  Df =   5.8   -3.8 ps  S =  14.6 ps  Cin =  0.0 ff  Cout =   1.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     288 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 669.5 -555.8 ps  S = 114.2 ps  Cin =  1.5 ff  Cout =   6.4 ff  Cmax = 310.4 ff  G =  405  
ABC: Path  2 --     292 : 4    8 sky130_fd_sc_hd__nor4_2   A =  12.51  Df =1154.0 -910.6 ps  S = 463.4 ps  Cin =  4.3 ff  Cout =  16.1 ff  Cmax =  64.1 ff  G =  360  
ABC: Path  3 --     294 : 4    2 sky130_fd_sc_hd__and4b_2  A =  11.26  Df =1455.4 -989.6 ps  S =  64.9 ps  Cin =  1.6 ff  Cout =   4.4 ff  Cmax = 297.6 ff  G =  270  
ABC: Path  4 --     295 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1709.0-1073.0 ps  S = 286.1 ps  Cin =  2.1 ff  Cout =  23.8 ff  Cmax = 130.0 ff  G = 1080  
ABC: Path  5 --     296 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2322.3-1313.7 ps  S = 749.5 ps  Cin =  2.1 ff  Cout =  64.5 ff  Cmax = 130.0 ff  G = 2999  
ABC: Path  6 --     396 : 3    1 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =2427.7-1192.0 ps  S =  98.2 ps  Cin =  4.6 ff  Cout =   2.5 ff  Cmax = 128.2 ff  G =   51  
ABC: Path  7 --     398 : 5    1 sky130_fd_sc_hd__a221o_2  A =  11.26  Df =2762.2-1387.2 ps  S =  48.5 ps  Cin =  2.3 ff  Cout =   1.8 ff  Cmax = 299.4 ff  G =   75  
ABC: Path  8 --     399 : 4    1 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df =3111.6 -749.5 ps  S = 186.7 ps  Cin =  1.8 ff  Cout =  33.4 ff  Cmax = 294.8 ff  G = 1904  
ABC: Start-point = pi14 (\mem_addr [21]).  End-point = po21 (\mem_rdata [5]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  233/   49  lat =    0  nd =   312  edge =    902  area =2516.30  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-LUOpMC/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       75
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       49
ABC RESULTS:        internal signals:      241
ABC RESULTS:           input signals:      233
ABC RESULTS:          output signals:       49
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mem_decode..
Removed 0 unused cells and 555 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).
Add mem_decode/$auto$insbuf.cc:97:execute$2174: \extra_irq_5 -> \extra_irq_out [5]
Add mem_decode/$auto$insbuf.cc:97:execute$2175: \extra_irq_6 -> \extra_irq_out [6]
Add mem_decode/$auto$insbuf.cc:97:execute$2176: \extra_irq_7 -> \extra_irq_out [7]
Add mem_decode/$auto$insbuf.cc:97:execute$2177: \mem_addr [0] -> \iomem_addr [0]
Add mem_decode/$auto$insbuf.cc:97:execute$2178: \mem_addr [1] -> \iomem_addr [1]
Add mem_decode/$auto$insbuf.cc:97:execute$2179: \mem_addr [2] -> \iomem_addr [2]
Add mem_decode/$auto$insbuf.cc:97:execute$2180: \mem_addr [3] -> \iomem_addr [3]
Add mem_decode/$auto$insbuf.cc:97:execute$2181: \mem_addr [4] -> \iomem_addr [4]
Add mem_decode/$auto$insbuf.cc:97:execute$2182: \mem_addr [5] -> \iomem_addr [5]
Add mem_decode/$auto$insbuf.cc:97:execute$2183: \mem_addr [6] -> \iomem_addr [6]
Add mem_decode/$auto$insbuf.cc:97:execute$2184: \mem_addr [7] -> \iomem_addr [7]
Add mem_decode/$auto$insbuf.cc:97:execute$2185: \mem_addr [8] -> \iomem_addr [8]
Add mem_decode/$auto$insbuf.cc:97:execute$2186: \mem_addr [9] -> \iomem_addr [9]
Add mem_decode/$auto$insbuf.cc:97:execute$2187: \mem_addr [10] -> \iomem_addr [10]
Add mem_decode/$auto$insbuf.cc:97:execute$2188: \mem_addr [11] -> \iomem_addr [11]
Add mem_decode/$auto$insbuf.cc:97:execute$2189: \mem_addr [12] -> \iomem_addr [12]
Add mem_decode/$auto$insbuf.cc:97:execute$2190: \mem_addr [13] -> \iomem_addr [13]
Add mem_decode/$auto$insbuf.cc:97:execute$2191: \mem_addr [14] -> \iomem_addr [14]
Add mem_decode/$auto$insbuf.cc:97:execute$2192: \mem_addr [15] -> \iomem_addr [15]
Add mem_decode/$auto$insbuf.cc:97:execute$2193: \mem_addr [16] -> \iomem_addr [16]
Add mem_decode/$auto$insbuf.cc:97:execute$2194: \mem_addr [17] -> \iomem_addr [17]
Add mem_decode/$auto$insbuf.cc:97:execute$2195: \mem_addr [18] -> \iomem_addr [18]
Add mem_decode/$auto$insbuf.cc:97:execute$2196: \mem_addr [19] -> \iomem_addr [19]
Add mem_decode/$auto$insbuf.cc:97:execute$2197: \mem_addr [20] -> \iomem_addr [20]
Add mem_decode/$auto$insbuf.cc:97:execute$2198: \mem_addr [21] -> \iomem_addr [21]
Add mem_decode/$auto$insbuf.cc:97:execute$2199: \mem_addr [22] -> \iomem_addr [22]
Add mem_decode/$auto$insbuf.cc:97:execute$2200: \mem_addr [23] -> \iomem_addr [23]
Add mem_decode/$auto$insbuf.cc:97:execute$2201: \mem_addr [24] -> \iomem_addr [24]
Add mem_decode/$auto$insbuf.cc:97:execute$2202: \mem_addr [25] -> \iomem_addr [25]
Add mem_decode/$auto$insbuf.cc:97:execute$2203: \mem_addr [26] -> \iomem_addr [26]
Add mem_decode/$auto$insbuf.cc:97:execute$2204: \mem_addr [27] -> \iomem_addr [27]
Add mem_decode/$auto$insbuf.cc:97:execute$2205: \mem_addr [28] -> \iomem_addr [28]
Add mem_decode/$auto$insbuf.cc:97:execute$2206: \mem_addr [29] -> \iomem_addr [29]
Add mem_decode/$auto$insbuf.cc:97:execute$2207: \mem_addr [30] -> \iomem_addr [30]
Add mem_decode/$auto$insbuf.cc:97:execute$2208: \mem_addr [31] -> \iomem_addr [31]
Add mem_decode/$auto$insbuf.cc:97:execute$2209: \mem_wdata [0] -> \iomem_wdata [0]
Add mem_decode/$auto$insbuf.cc:97:execute$2210: \mem_wdata [1] -> \iomem_wdata [1]
Add mem_decode/$auto$insbuf.cc:97:execute$2211: \mem_wdata [2] -> \iomem_wdata [2]
Add mem_decode/$auto$insbuf.cc:97:execute$2212: \mem_wdata [3] -> \iomem_wdata [3]
Add mem_decode/$auto$insbuf.cc:97:execute$2213: \mem_wdata [4] -> \iomem_wdata [4]
Add mem_decode/$auto$insbuf.cc:97:execute$2214: \mem_wdata [5] -> \iomem_wdata [5]
Add mem_decode/$auto$insbuf.cc:97:execute$2215: \mem_wdata [6] -> \iomem_wdata [6]
Add mem_decode/$auto$insbuf.cc:97:execute$2216: \mem_wdata [7] -> \iomem_wdata [7]
Add mem_decode/$auto$insbuf.cc:97:execute$2217: \mem_wdata [8] -> \iomem_wdata [8]
Add mem_decode/$auto$insbuf.cc:97:execute$2218: \mem_wdata [9] -> \iomem_wdata [9]
Add mem_decode/$auto$insbuf.cc:97:execute$2219: \mem_wdata [10] -> \iomem_wdata [10]
Add mem_decode/$auto$insbuf.cc:97:execute$2220: \mem_wdata [11] -> \iomem_wdata [11]
Add mem_decode/$auto$insbuf.cc:97:execute$2221: \mem_wdata [12] -> \iomem_wdata [12]
Add mem_decode/$auto$insbuf.cc:97:execute$2222: \mem_wdata [13] -> \iomem_wdata [13]
Add mem_decode/$auto$insbuf.cc:97:execute$2223: \mem_wdata [14] -> \iomem_wdata [14]
Add mem_decode/$auto$insbuf.cc:97:execute$2224: \mem_wdata [15] -> \iomem_wdata [15]
Add mem_decode/$auto$insbuf.cc:97:execute$2225: \mem_wdata [16] -> \iomem_wdata [16]
Add mem_decode/$auto$insbuf.cc:97:execute$2226: \mem_wdata [17] -> \iomem_wdata [17]
Add mem_decode/$auto$insbuf.cc:97:execute$2227: \mem_wdata [18] -> \iomem_wdata [18]
Add mem_decode/$auto$insbuf.cc:97:execute$2228: \mem_wdata [19] -> \iomem_wdata [19]
Add mem_decode/$auto$insbuf.cc:97:execute$2229: \mem_wdata [20] -> \iomem_wdata [20]
Add mem_decode/$auto$insbuf.cc:97:execute$2230: \mem_wdata [21] -> \iomem_wdata [21]
Add mem_decode/$auto$insbuf.cc:97:execute$2231: \mem_wdata [22] -> \iomem_wdata [22]
Add mem_decode/$auto$insbuf.cc:97:execute$2232: \mem_wdata [23] -> \iomem_wdata [23]
Add mem_decode/$auto$insbuf.cc:97:execute$2233: \mem_wdata [24] -> \iomem_wdata [24]
Add mem_decode/$auto$insbuf.cc:97:execute$2234: \mem_wdata [25] -> \iomem_wdata [25]
Add mem_decode/$auto$insbuf.cc:97:execute$2235: \mem_wdata [26] -> \iomem_wdata [26]
Add mem_decode/$auto$insbuf.cc:97:execute$2236: \mem_wdata [27] -> \iomem_wdata [27]
Add mem_decode/$auto$insbuf.cc:97:execute$2237: \mem_wdata [28] -> \iomem_wdata [28]
Add mem_decode/$auto$insbuf.cc:97:execute$2238: \mem_wdata [29] -> \iomem_wdata [29]
Add mem_decode/$auto$insbuf.cc:97:execute$2239: \mem_wdata [30] -> \iomem_wdata [30]
Add mem_decode/$auto$insbuf.cc:97:execute$2240: \mem_wdata [31] -> \iomem_wdata [31]
Add mem_decode/$auto$insbuf.cc:97:execute$2241: \mem_wstrb [0] -> \iomem_wstrb [0]
Add mem_decode/$auto$insbuf.cc:97:execute$2242: \mem_wstrb [1] -> \iomem_wstrb [1]
Add mem_decode/$auto$insbuf.cc:97:execute$2243: \mem_wstrb [2] -> \iomem_wstrb [2]
Add mem_decode/$auto$insbuf.cc:97:execute$2244: \mem_wstrb [3] -> \iomem_wstrb [3]

62. Executing CHECK pass (checking for obvious problems).
Checking module mem_decode...
Found and reported 0 problems.

63. Printing statistics.

=== mem_decode ===

   Number of wires:                298
   Number of wire bits:            685
   Number of public wires:          35
   Number of public wire bits:     422
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                416
     sky130_fd_sc_hd__a21o_2        75
     sky130_fd_sc_hd__a21oi_2       14
     sky130_fd_sc_hd__a221o_2        7
     sky130_fd_sc_hd__a31o_2        25
     sky130_fd_sc_hd__a41o_2        32
     sky130_fd_sc_hd__and2_2        10
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2        27
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1         49
     sky130_fd_sc_hd__buf_2         71
     sky130_fd_sc_hd__conb_1        32
     sky130_fd_sc_hd__dfxtp_2        1
     sky130_fd_sc_hd__inv_2          8
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         3
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__nor4_2         2
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       7
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or2b_2        25
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or4_2          9
     sky130_fd_sc_hd__or4b_2         1

   Chip area for module '\mem_decode': 3012.889600

64. Executing Verilog backend.
Dumping module `\mem_decode'.

65. Executing JSON backend.

End of script. Logfile hash: 33e0f3c938, CPU: user 0.70s system 0.04s, MEM: 42.50 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 50% 2x abc (0 sec), 13% 2x read_liberty (0 sec), ...
