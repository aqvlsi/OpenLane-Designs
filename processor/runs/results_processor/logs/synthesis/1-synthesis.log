
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/processor/src/alu.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/alu.v' to AST representation.
Storing AST representation for module `$abstract\alu'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/processor/src/wrapper_memory.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/wrapper_memory.v' to AST representation.
Storing AST representation for module `$abstract\wrappermem'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Fetch.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Fetch.v' to AST representation.
Storing AST representation for module `$abstract\fetch'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Core.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Core.v' to AST representation.
Storing AST representation for module `$abstract\core'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/designs/processor/src/branch.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/branch.v' to AST representation.
Storing AST representation for module `$abstract\branch'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /openlane/designs/processor/src/control_unit.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/control_unit.v' to AST representation.
Storing AST representation for module `$abstract\controlunit'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /openlane/designs/processor/src/mux2_4.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/mux2_4.v' to AST representation.
Storing AST representation for module `$abstract\mux2_4'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /openlane/designs/processor/src/mux1_2.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/mux1_2.v' to AST representation.
Storing AST representation for module `$abstract\mux'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Write_back.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Write_back.v' to AST representation.
Storing AST representation for module `$abstract\write_back'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /openlane/designs/processor/src/control_decoder.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/control_decoder.v' to AST representation.
Storing AST representation for module `$abstract\control_decoder'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /openlane/designs/processor/src/type_decoder.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/type_decoder.v' to AST representation.
Storing AST representation for module `$abstract\type_decoder'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Decode.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Decode.v' to AST representation.
Storing AST representation for module `$abstract\decode'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Memory.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Memory.v' to AST representation.
Storing AST representation for module `$abstract\memory_stage'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /openlane/designs/processor/src/immediate_gen.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/immediate_gen.v' to AST representation.
Storing AST representation for module `$abstract\immediategen'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /openlane/designs/processor/src/adder.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/adder.v' to AST representation.
Storing AST representation for module `$abstract\adder'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /openlane/designs/processor/src/register_file.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/register_file.v' to AST representation.
Storing AST representation for module `$abstract\registerfile'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /openlane/designs/processor/src/program_counter.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/program_counter.v' to AST representation.
Storing AST representation for module `$abstract\pc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /openlane/designs/processor/src/fetch_pipe.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/fetch_pipe.v' to AST representation.
Storing AST representation for module `$abstract\fetch_pipe'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /openlane/designs/processor/src/Execute.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/Execute.v' to AST representation.
Storing AST representation for module `$abstract\execute'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /openlane/designs/processor/src/mux3_8.v
Parsing SystemVerilog input from `/openlane/designs/processor/src/mux3_8.v' to AST representation.
Storing AST representation for module `$abstract\mux3_8'.
Successfully finished Verilog frontend.

22. Executing HIERARCHY pass (managing design hierarchy).

23. Executing AST frontend in derive mode using pre-parsed AST for module `\core'.
Generating RTLIL representation for module `\core'.

23.1. Analyzing design hierarchy..
Top module:  \core

23.2. Executing AST frontend in derive mode using pre-parsed AST for module `\write_back'.
Generating RTLIL representation for module `\write_back'.

23.3. Executing AST frontend in derive mode using pre-parsed AST for module `\memory_stage'.
Generating RTLIL representation for module `\memory_stage'.

23.4. Executing AST frontend in derive mode using pre-parsed AST for module `\execute'.
Generating RTLIL representation for module `\execute'.

23.5. Executing AST frontend in derive mode using pre-parsed AST for module `\decode'.
Generating RTLIL representation for module `\decode'.

23.6. Executing AST frontend in derive mode using pre-parsed AST for module `\fetch_pipe'.
Generating RTLIL representation for module `\fetch_pipe'.

23.7. Executing AST frontend in derive mode using pre-parsed AST for module `\fetch'.
Generating RTLIL representation for module `\fetch'.

23.8. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:     \memory_stage
Used module:     \execute
Used module:     \decode
Used module:     \fetch_pipe
Used module:     \fetch

23.9. Executing AST frontend in derive mode using pre-parsed AST for module `\pc'.
Generating RTLIL representation for module `\pc'.

23.10. Executing AST frontend in derive mode using pre-parsed AST for module `\branch'.
Generating RTLIL representation for module `\branch'.

23.11. Executing AST frontend in derive mode using pre-parsed AST for module `\mux'.
Generating RTLIL representation for module `\mux'.

23.12. Executing AST frontend in derive mode using pre-parsed AST for module `\registerfile'.
Generating RTLIL representation for module `\registerfile'.
Warning: Replacing memory \register with list of registers. See /openlane/designs/processor/src/register_file.v:20

23.13. Executing AST frontend in derive mode using pre-parsed AST for module `\mux3_8'.
Generating RTLIL representation for module `\mux3_8'.

23.14. Executing AST frontend in derive mode using pre-parsed AST for module `\immediategen'.
Generating RTLIL representation for module `\immediategen'.

23.15. Executing AST frontend in derive mode using pre-parsed AST for module `\controlunit'.
Generating RTLIL representation for module `\controlunit'.

23.16. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Generating RTLIL representation for module `\adder'.

23.17. Executing AST frontend in derive mode using pre-parsed AST for module `\alu'.
Generating RTLIL representation for module `\alu'.

23.18. Executing AST frontend in derive mode using pre-parsed AST for module `\wrappermem'.
Generating RTLIL representation for module `\wrappermem'.

23.19. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2_4'.
Generating RTLIL representation for module `\mux2_4'.

23.20. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:         \mux2_4
Used module:     \memory_stage
Used module:         \wrappermem
Used module:     \execute
Used module:         \adder
Used module:         \alu
Used module:     \decode
Used module:         \branch
Used module:         \mux
Used module:         \registerfile
Used module:         \mux3_8
Used module:         \immediategen
Used module:         \controlunit
Used module:     \fetch_pipe
Used module:     \fetch
Used module:         \pc

23.21. Executing AST frontend in derive mode using pre-parsed AST for module `\control_decoder'.
Generating RTLIL representation for module `\control_decoder'.

23.22. Executing AST frontend in derive mode using pre-parsed AST for module `\type_decoder'.
Generating RTLIL representation for module `\type_decoder'.

23.23. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:         \mux2_4
Used module:     \memory_stage
Used module:         \wrappermem
Used module:     \execute
Used module:         \adder
Used module:         \alu
Used module:     \decode
Used module:         \branch
Used module:         \mux
Used module:         \registerfile
Used module:         \mux3_8
Used module:         \immediategen
Used module:         \controlunit
Used module:             \control_decoder
Used module:             \type_decoder
Used module:     \fetch_pipe
Used module:     \fetch
Used module:         \pc

23.24. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:         \mux2_4
Used module:     \memory_stage
Used module:         \wrappermem
Used module:     \execute
Used module:         \adder
Used module:         \alu
Used module:     \decode
Used module:         \branch
Used module:         \mux
Used module:         \registerfile
Used module:         \mux3_8
Used module:         \immediategen
Used module:         \controlunit
Used module:             \control_decoder
Used module:             \type_decoder
Used module:     \fetch_pipe
Used module:     \fetch
Used module:         \pc
Removing unused module `$abstract\mux3_8'.
Removing unused module `$abstract\execute'.
Removing unused module `$abstract\fetch_pipe'.
Removing unused module `$abstract\pc'.
Removing unused module `$abstract\registerfile'.
Removing unused module `$abstract\adder'.
Removing unused module `$abstract\immediategen'.
Removing unused module `$abstract\memory_stage'.
Removing unused module `$abstract\decode'.
Removing unused module `$abstract\type_decoder'.
Removing unused module `$abstract\control_decoder'.
Removing unused module `$abstract\write_back'.
Removing unused module `$abstract\mux'.
Removing unused module `$abstract\mux2_4'.
Removing unused module `$abstract\controlunit'.
Removing unused module `$abstract\branch'.
Removing unused module `$abstract\core'.
Removing unused module `$abstract\fetch'.
Removing unused module `$abstract\wrappermem'.
Removing unused module `$abstract\alu'.
Removed 20 unused modules.

24. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/processor/runs/results_processor/tmp/synthesis/hierarchy.dot'.
Dumping module core to page 1.
Renaming module core to core.

25. Executing TRIBUF pass.

26. Executing HIERARCHY pass (managing design hierarchy).

26.1. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:         \mux2_4
Used module:     \memory_stage
Used module:         \wrappermem
Used module:     \execute
Used module:         \adder
Used module:         \alu
Used module:     \decode
Used module:         \branch
Used module:         \mux
Used module:         \registerfile
Used module:         \mux3_8
Used module:         \immediategen
Used module:         \controlunit
Used module:             \control_decoder
Used module:             \type_decoder
Used module:     \fetch_pipe
Used module:     \fetch
Used module:         \pc

26.2. Analyzing design hierarchy..
Top module:  \core
Used module:     \write_back
Used module:         \mux2_4
Used module:     \memory_stage
Used module:         \wrappermem
Used module:     \execute
Used module:         \adder
Used module:         \alu
Used module:     \decode
Used module:         \branch
Used module:         \mux
Used module:         \registerfile
Used module:         \mux3_8
Used module:         \immediategen
Used module:         \controlunit
Used module:             \control_decoder
Used module:             \type_decoder
Used module:     \fetch_pipe
Used module:     \fetch
Used module:         \pc
Removed 0 unused modules.

27. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

28. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 37 switch rules as full_case in process $proc$/openlane/designs/processor/src/control_decoder.v:27$92 in module control_decoder.
Removed 1 dead cases from process $proc$/openlane/designs/processor/src/mux2_4.v:7$91 in module mux2_4.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/mux2_4.v:7$91 in module mux2_4.
Removed 9 dead cases from process $proc$/openlane/designs/processor/src/wrapper_memory.v:15$81 in module wrappermem.
Marked 17 switch rules as full_case in process $proc$/openlane/designs/processor/src/wrapper_memory.v:15$81 in module wrappermem.
Marked 11 switch rules as full_case in process $proc$/openlane/designs/processor/src/alu.v:9$59 in module alu.
Removed 1 dead cases from process $proc$/openlane/designs/processor/src/mux3_8.v:7$55 in module mux3_8.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/mux3_8.v:7$55 in module mux3_8.
Removed 1 dead cases from process $proc$/openlane/designs/processor/src/register_file.v:0$52 in module registerfile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/register_file.v:0$52 in module registerfile.
Removed 1 dead cases from process $proc$/openlane/designs/processor/src/register_file.v:0$49 in module registerfile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/register_file.v:0$49 in module registerfile.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/processor/src/register_file.v:17$37 in module registerfile.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/processor/src/branch.v:9$19 in module branch.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/processor/src/program_counter.v:16$13 in module pc.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/Fetch.v:35$9 in module fetch.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/processor/src/fetch_pipe.v:16$6 in module fetch_pipe.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/processor/src/Memory.v:31$3 in module memory_stage.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/processor/src/type_decoder.v:16$175 in module type_decoder.
Removed a total of 13 dead cases.

29. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 44 assignments to connections.

30. Executing PROC_INIT pass (extract init attributes).

31. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
Found async reset \rst in `\pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.

32. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~82 debug messages>

33. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
     1/55: $9\imm_sel[2:0]
     2/55: $37\alu_control[3:0]
     3/55: $9\mem_to_reg[1:0]
     4/55: $36\alu_control[3:0]
     5/55: $8\imm_sel[2:0]
     6/55: $8\mem_to_reg[1:0]
     7/55: $7\imm_sel[2:0]
     8/55: $35\alu_control[3:0]
     9/55: $7\mem_to_reg[1:0]
    10/55: $6\imm_sel[2:0]
    11/55: $6\mem_to_reg[1:0]
    12/55: $34\alu_control[3:0]
    13/55: $5\imm_sel[2:0]
    14/55: $5\mem_to_reg[1:0]
    15/55: $33\alu_control[3:0]
    16/55: $32\alu_control[3:0]
    17/55: $31\alu_control[3:0]
    18/55: $30\alu_control[3:0]
    19/55: $29\alu_control[3:0]
    20/55: $28\alu_control[3:0]
    21/55: $27\alu_control[3:0]
    22/55: $26\alu_control[3:0]
    23/55: $4\mem_to_reg[1:0]
    24/55: $4\imm_sel[2:0]
    25/55: $25\alu_control[3:0]
    26/55: $24\alu_control[3:0]
    27/55: $23\alu_control[3:0]
    28/55: $22\alu_control[3:0]
    29/55: $3\mem_to_reg[1:0]
    30/55: $3\imm_sel[2:0]
    31/55: $21\alu_control[3:0]
    32/55: $20\alu_control[3:0]
    33/55: $19\alu_control[3:0]
    34/55: $18\alu_control[3:0]
    35/55: $17\alu_control[3:0]
    36/55: $16\alu_control[3:0]
    37/55: $15\alu_control[3:0]
    38/55: $14\alu_control[3:0]
    39/55: $13\alu_control[3:0]
    40/55: $12\alu_control[3:0]
    41/55: $2\mem_to_reg[1:0]
    42/55: $2\imm_sel[2:0]
    43/55: $11\alu_control[3:0]
    44/55: $10\alu_control[3:0]
    45/55: $9\alu_control[3:0]
    46/55: $8\alu_control[3:0]
    47/55: $7\alu_control[3:0]
    48/55: $6\alu_control[3:0]
    49/55: $5\alu_control[3:0]
    50/55: $4\alu_control[3:0]
    51/55: $3\alu_control[3:0]
    52/55: $2\alu_control[3:0]
    53/55: $1\alu_control[3:0]
    54/55: $1\mem_to_reg[1:0]
    55/55: $1\imm_sel[2:0]
Creating decoders for process `\mux2_4.$proc$/openlane/designs/processor/src/mux2_4.v:7$91'.
     1/1: $1\out[31:0]
Creating decoders for process `\wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81'.
     1/23: $11\wrap_load_out[31:0]
     2/23: $10\wrap_load_out[31:0]
     3/23: $9\wrap_load_out[31:0]
     4/23: $8\wrap_load_out[31:0]
     5/23: $7\wrap_load_out[31:0]
     6/23: $6\wrap_load_out[31:0]
     7/23: $5\wrap_load_out[31:0]
     8/23: $4\wrap_load_out[31:0]
     9/23: $3\wrap_load_out[31:0]
    10/23: $2\wrap_load_out[31:0]
    11/23: $1\wrap_load_out[31:0]
    12/23: $6\data_o[31:0]
    13/23: $6\masking[3:0]
    14/23: $5\data_o[31:0]
    15/23: $5\masking[3:0]
    16/23: $4\data_o[31:0]
    17/23: $4\masking[3:0]
    18/23: $3\data_o[31:0]
    19/23: $3\masking[3:0]
    20/23: $2\data_o[31:0]
    21/23: $2\masking[3:0]
    22/23: $1\data_o[31:0]
    23/23: $1\masking[3:0]
Creating decoders for process `\alu.$proc$/openlane/designs/processor/src/alu.v:9$59'.
     1/11: $11\res_o[31:0]
     2/11: $10\res_o[31:0]
     3/11: $9\res_o[31:0]
     4/11: $8\res_o[31:0]
     5/11: $7\res_o[31:0]
     6/11: $6\res_o[31:0]
     7/11: $5\res_o[31:0]
     8/11: $4\res_o[31:0]
     9/11: $3\res_o[31:0]
    10/11: $2\res_o[31:0]
    11/11: $1\res_o[31:0]
Creating decoders for process `\adder.$proc$/openlane/designs/processor/src/adder.v:6$57'.
Creating decoders for process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
Creating decoders for process `\mux3_8.$proc$/openlane/designs/processor/src/mux3_8.v:7$55'.
     1/1: $1\out[31:0]
Creating decoders for process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$52'.
     1/1: $1$mem2reg_rd$\register$/openlane/designs/processor/src/register_file.v:31$36_DATA[31:0]$54
Creating decoders for process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$49'.
     1/1: $1$mem2reg_rd$\register$/openlane/designs/processor/src/register_file.v:30$35_DATA[31:0]$51
Creating decoders for process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
     1/37: $2$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_ADDR[4:0]$43
     2/37: $2$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_DATA[31:0]$44
     3/37: $1$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_DATA[31:0]$42
     4/37: $1$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_ADDR[4:0]$41
     5/37: $1\i[31:0]
     6/37: $0\register[31][31:0]
     7/37: $0\register[30][31:0]
     8/37: $0\register[29][31:0]
     9/37: $0\register[28][31:0]
    10/37: $0\register[27][31:0]
    11/37: $0\register[26][31:0]
    12/37: $0\register[25][31:0]
    13/37: $0\register[24][31:0]
    14/37: $0\register[23][31:0]
    15/37: $0\register[22][31:0]
    16/37: $0\register[21][31:0]
    17/37: $0\register[20][31:0]
    18/37: $0\register[19][31:0]
    19/37: $0\register[18][31:0]
    20/37: $0\register[17][31:0]
    21/37: $0\register[16][31:0]
    22/37: $0\register[15][31:0]
    23/37: $0\register[14][31:0]
    24/37: $0\register[13][31:0]
    25/37: $0\register[12][31:0]
    26/37: $0\register[11][31:0]
    27/37: $0\register[10][31:0]
    28/37: $0\register[9][31:0]
    29/37: $0\register[8][31:0]
    30/37: $0\register[7][31:0]
    31/37: $0\register[6][31:0]
    32/37: $0\register[5][31:0]
    33/37: $0\register[4][31:0]
    34/37: $0\register[3][31:0]
    35/37: $0\register[2][31:0]
    36/37: $0\register[1][31:0]
    37/37: $0\register[0][31:0]
Creating decoders for process `\branch.$proc$/openlane/designs/processor/src/branch.v:9$19'.
     1/2: $2\result[0:0]
     2/2: $1\result[0:0]
Creating decoders for process `\pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.
     1/2: $0\address_out[31:0]
     2/2: $0\pre_address[31:0]
Creating decoders for process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:47$12'.
Creating decoders for process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
     1/3: $1\request[0:0]
     2/3: $1\we_re[0:0]
     3/3: $1\mask[3:0]
Creating decoders for process `\fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
     1/3: $0\instruc[31:0]
     2/3: $0\pre_address[31:0]
     3/3: $0\flush_pipeline[0:0]
Creating decoders for process `\memory_stage.$proc$/openlane/designs/processor/src/Memory.v:31$3'.
     1/2: $1\we_re[0:0]
     2/2: $1\request[0:0]
Creating decoders for process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
     1/10: $2\load[0:0]
     2/10: $1\r_type[0:0]
     3/10: $1\auipc[0:0]
     4/10: $1\lui[0:0]
     5/10: $1\jalr[0:0]
     6/10: $1\jal[0:0]
     7/10: $1\i_type[0:0]
     8/10: $1\branch[0:0]
     9/10: $1\store[0:0]
    10/10: $1\load[0:0]

34. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\control_decoder.\next_sel' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\mem_en' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\Load' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\reg_write' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\operand_a' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\operand_b' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\Store' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
No latch inferred for signal `\control_decoder.\Branch' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
Latch inferred for signal `\control_decoder.\alu_control' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92': $auto$proc_dlatch.cc:427:proc_dlatch$2221
Latch inferred for signal `\control_decoder.\mem_to_reg' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92': $auto$proc_dlatch.cc:427:proc_dlatch$3904
Latch inferred for signal `\control_decoder.\imm_sel' from process `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92': $auto$proc_dlatch.cc:427:proc_dlatch$4029
No latch inferred for signal `\mux2_4.\out' from process `\mux2_4.$proc$/openlane/designs/processor/src/mux2_4.v:7$91'.
Latch inferred for signal `\wrappermem.\wrap_load_out' from process `\wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81': $auto$proc_dlatch.cc:427:proc_dlatch$4086
Latch inferred for signal `\wrappermem.\masking' from process `\wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81': $auto$proc_dlatch.cc:427:proc_dlatch$4305
Latch inferred for signal `\wrappermem.\data_o' from process `\wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81': $auto$proc_dlatch.cc:427:proc_dlatch$4316
No latch inferred for signal `\alu.\res_o' from process `\alu.$proc$/openlane/designs/processor/src/alu.v:9$59'.
No latch inferred for signal `\adder.\adder_out' from process `\adder.$proc$/openlane/designs/processor/src/adder.v:6$57'.
No latch inferred for signal `\immediategen.\i_imme' from process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
No latch inferred for signal `\immediategen.\sb_imme' from process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
No latch inferred for signal `\immediategen.\s_imme' from process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
No latch inferred for signal `\immediategen.\uj_imme' from process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
No latch inferred for signal `\immediategen.\u_imme' from process `\immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
No latch inferred for signal `\mux3_8.\out' from process `\mux3_8.$proc$/openlane/designs/processor/src/mux3_8.v:7$55'.
No latch inferred for signal `\registerfile.$mem2reg_rd$\register$/openlane/designs/processor/src/register_file.v:31$36_DATA' from process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$52'.
No latch inferred for signal `\registerfile.$mem2reg_rd$\register$/openlane/designs/processor/src/register_file.v:30$35_DATA' from process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$49'.
Latch inferred for signal `\branch.\result' from process `\branch.$proc$/openlane/designs/processor/src/branch.v:9$19': $auto$proc_dlatch.cc:427:proc_dlatch$4427
No latch inferred for signal `\fetch.\instruction' from process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:47$12'.
No latch inferred for signal `\fetch.\mask' from process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
No latch inferred for signal `\fetch.\we_re' from process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
No latch inferred for signal `\fetch.\request' from process `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
No latch inferred for signal `\memory_stage.\we_re' from process `\memory_stage.$proc$/openlane/designs/processor/src/Memory.v:31$3'.
No latch inferred for signal `\memory_stage.\request' from process `\memory_stage.$proc$/openlane/designs/processor/src/Memory.v:31$3'.
No latch inferred for signal `\type_decoder.\load' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\store' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\branch' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\r_type' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\i_type' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\jal' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\jalr' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\lui' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
No latch inferred for signal `\type_decoder.\auipc' from process `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.

35. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\registerfile.\i' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4480' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[0]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $dff cell `$procdff$4483' with positive edge clock.
Creating register for signal `\registerfile.\register[1]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4484' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[2]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4485' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[3]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4486' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[4]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4487' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[5]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4488' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[6]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4489' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[7]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4490' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[8]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4491' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[9]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4492' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[10]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4493' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[11]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4494' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[12]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4495' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[13]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4496' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[14]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4497' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[15]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4498' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[16]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4499' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[17]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4500' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[18]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4501' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[19]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4502' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[20]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4503' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[21]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4504' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[22]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4505' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[23]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4506' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[24]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4507' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[25]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4508' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[26]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4509' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[27]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4510' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[28]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4511' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[29]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4512' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[30]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4513' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.\register[31]' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4514' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_ADDR' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4515' with positive edge clock and negative level reset.
Creating register for signal `\registerfile.$mem2reg_wr$\register$/openlane/designs/processor/src/register_file.v:25$34_DATA' using process `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
  created $adff cell `$procdff$4516' with positive edge clock and negative level reset.
Creating register for signal `\pc.\address_out' using process `\pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.
  created $adff cell `$procdff$4517' with positive edge clock and negative level reset.
Creating register for signal `\pc.\pre_address' using process `\pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.
  created $dff cell `$procdff$4520' with positive edge clock.
Creating register for signal `\fetch_pipe.\pre_address' using process `\fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
  created $dff cell `$procdff$4521' with positive edge clock.
Creating register for signal `\fetch_pipe.\instruc' using process `\fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
  created $dff cell `$procdff$4522' with positive edge clock.
Creating register for signal `\fetch_pipe.\flush_pipeline' using process `\fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
  created $dff cell `$procdff$4523' with positive edge clock.

36. Executing PROC_MEMWR pass (convert process memory writes to cells).

37. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 37 empty switches in `\control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
Removing empty process `control_decoder.$proc$/openlane/designs/processor/src/control_decoder.v:27$92'.
Found and cleaned up 1 empty switch in `\mux2_4.$proc$/openlane/designs/processor/src/mux2_4.v:7$91'.
Removing empty process `mux2_4.$proc$/openlane/designs/processor/src/mux2_4.v:7$91'.
Found and cleaned up 17 empty switches in `\wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81'.
Removing empty process `wrappermem.$proc$/openlane/designs/processor/src/wrapper_memory.v:15$81'.
Found and cleaned up 11 empty switches in `\alu.$proc$/openlane/designs/processor/src/alu.v:9$59'.
Removing empty process `alu.$proc$/openlane/designs/processor/src/alu.v:9$59'.
Removing empty process `adder.$proc$/openlane/designs/processor/src/adder.v:6$57'.
Removing empty process `immediategen.$proc$/openlane/designs/processor/src/immediate_gen.v:10$56'.
Found and cleaned up 1 empty switch in `\mux3_8.$proc$/openlane/designs/processor/src/mux3_8.v:7$55'.
Removing empty process `mux3_8.$proc$/openlane/designs/processor/src/mux3_8.v:7$55'.
Found and cleaned up 1 empty switch in `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$52'.
Removing empty process `registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$52'.
Found and cleaned up 1 empty switch in `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$49'.
Removing empty process `registerfile.$proc$/openlane/designs/processor/src/register_file.v:0$49'.
Found and cleaned up 2 empty switches in `\registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
Removing empty process `registerfile.$proc$/openlane/designs/processor/src/register_file.v:17$37'.
Found and cleaned up 2 empty switches in `\branch.$proc$/openlane/designs/processor/src/branch.v:9$19'.
Removing empty process `branch.$proc$/openlane/designs/processor/src/branch.v:9$19'.
Found and cleaned up 2 empty switches in `\pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.
Removing empty process `pc.$proc$/openlane/designs/processor/src/program_counter.v:16$13'.
Removing empty process `fetch.$proc$/openlane/designs/processor/src/Fetch.v:47$12'.
Found and cleaned up 1 empty switch in `\fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
Removing empty process `fetch.$proc$/openlane/designs/processor/src/Fetch.v:35$9'.
Found and cleaned up 3 empty switches in `\fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
Removing empty process `fetch_pipe.$proc$/openlane/designs/processor/src/fetch_pipe.v:16$6'.
Found and cleaned up 1 empty switch in `\memory_stage.$proc$/openlane/designs/processor/src/Memory.v:31$3'.
Removing empty process `memory_stage.$proc$/openlane/designs/processor/src/Memory.v:31$3'.
Found and cleaned up 2 empty switches in `\type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
Removing empty process `type_decoder.$proc$/openlane/designs/processor/src/type_decoder.v:16$175'.
Cleaned up 82 empty switches.

38. Executing CHECK pass (checking for obvious problems).
Checking module core...
Checking module control_decoder...
Checking module mux2_4...
Checking module wrappermem...
Checking module alu...
Checking module adder...
Checking module controlunit...
Checking module immediategen...
Checking module mux3_8...
Checking module registerfile...
Checking module mux...
Checking module branch...
Checking module pc...
Checking module fetch...
Checking module fetch_pipe...
Checking module decode...
Checking module execute...
Checking module memory_stage...
Checking module write_back...
Checking module type_decoder...
Found and reported 0 problems.

39. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
Optimizing module control_decoder.
<suppressed ~739 debug messages>
Optimizing module mux2_4.
<suppressed ~1 debug messages>
Optimizing module wrappermem.
<suppressed ~135 debug messages>
Optimizing module alu.
<suppressed ~1 debug messages>
Optimizing module adder.
Optimizing module controlunit.
Optimizing module immediategen.
Optimizing module mux3_8.
<suppressed ~1 debug messages>
Optimizing module registerfile.
<suppressed ~5 debug messages>
Optimizing module mux.
Optimizing module branch.
<suppressed ~16 debug messages>
Optimizing module pc.
Optimizing module fetch.
Optimizing module fetch_pipe.
Optimizing module decode.
Optimizing module execute.
Optimizing module memory_stage.
<suppressed ~2 debug messages>
Optimizing module write_back.
Optimizing module type_decoder.

40. Executing FLATTEN pass (flatten design).
Deleting now unused module control_decoder.
Deleting now unused module mux2_4.
Deleting now unused module wrappermem.
Deleting now unused module alu.
Deleting now unused module adder.
Deleting now unused module controlunit.
Deleting now unused module immediategen.
Deleting now unused module mux3_8.
Deleting now unused module registerfile.
Deleting now unused module mux.
Deleting now unused module branch.
Deleting now unused module pc.
Deleting now unused module fetch.
Deleting now unused module fetch_pipe.
Deleting now unused module decode.
Deleting now unused module execute.
Deleting now unused module memory_stage.
Deleting now unused module write_back.
Deleting now unused module type_decoder.
<suppressed ~20 debug messages>

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 14 unused cells and 1522 unused wires.
<suppressed ~18 debug messages>

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~885 debug messages>
Removed a total of 295 cells.

43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\u_fetchpipeline.$procmux$2136: \u_fetchpipeline.flush_pipeline -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2156.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1153.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1156.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1159.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1162.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1165.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1168.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1171.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1174.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1177.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1180.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1186.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1189.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1192.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1195.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1198.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1201.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1204.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1207.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1210.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1216.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1219.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1222.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1225.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1228.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1231.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1234.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1237.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1243.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1246.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1249.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1252.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1255.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1258.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1261.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1267.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1270.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1273.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1276.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1279.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1282.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1288.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1291.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1294.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1297.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1300.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1306.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1309.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1312.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1315.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1321.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1324.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1327.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1333.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1336.
    dead port 1/2 on $mux $flatten\u_executestage.\u_alu0.$procmux$1342.
Removed 56 multiplexer ports.
<suppressed ~67 debug messages>

43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    New ctrl vector for $pmux cell $flatten\u_decodestage.\u_branch0.$procmux$2086: { $flatten\u_decodestage.\u_branch0.$procmux$2091_CMP $flatten\u_decodestage.\u_branch0.$procmux$2090_CMP $flatten\u_decodestage.\u_branch0.$procmux$2089_CMP $flatten\u_decodestage.\u_branch0.$procmux$2088_CMP $flatten\u_decodestage.\u_branch0.$procmux$2087_CMP }
  Optimizing cells in module \core.
Performed a total of 2 changes.

43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

43.6. Executing OPT_DFF pass (perform DFF optimizations).

43.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 359 unused wires.
<suppressed ~1 debug messages>

43.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

43.9. Rerunning OPT passes. (Maybe there is more to do..)

43.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

43.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

43.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

43.13. Executing OPT_DFF pass (perform DFF optimizations).

43.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

43.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

43.16. Finished OPT passes. (There is nothing left to do.)

44. Executing FSM pass (extract and optimize FSM).

44.1. Executing FSM_DETECT pass (finding FSMs in design).

44.2. Executing FSM_EXTRACT pass (extracting FSM from design).

44.3. Executing FSM_OPT pass (simple optimizations of FSMs).

44.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

44.5. Executing FSM_OPT pass (simple optimizations of FSMs).

44.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

44.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

44.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\u_fetchstage.\u_pc0.$procdff$4520 ($dff) from module core (D = \u_fetchstage.u_pc0.address_out, Q = \u_fetchstage.u_pc0.pre_address).
Adding EN signal on $flatten\u_fetchstage.\u_pc0.$procdff$4517 ($adff) from module core (D = $flatten\u_fetchstage.\u_pc0.$0\address_out[31:0], Q = \u_fetchstage.u_pc0.address_out).
Adding SRST signal on $flatten\u_fetchpipeline.$procdff$4522 ($dff) from module core (D = $flatten\u_fetchpipeline.$procmux$2118_Y, Q = \u_fetchpipeline.instruc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4534 ($sdff) from module core (D = \instruction, Q = \u_fetchpipeline.instruc).
Adding SRST signal on $flatten\u_fetchpipeline.$procdff$4521 ($dff) from module core (D = $flatten\u_fetchpipeline.$procmux$2127_Y, Q = \u_fetchpipeline.pre_address, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4538 ($sdff) from module core (D = \u_fetchstage.u_pc0.pre_address, Q = \u_fetchpipeline.pre_address).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4514 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[31]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4513 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[30]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4512 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[29]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4511 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[28]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4510 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[27]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4509 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[26]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4508 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[25]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4507 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[24]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4506 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[23]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4505 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[22]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4504 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[21]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4503 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[20]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4502 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[19]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4501 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[18]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4500 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[17]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4499 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[16]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4498 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[15]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4497 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[14]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4496 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[13]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4495 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[12]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4494 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[11]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4493 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[10]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4492 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[9]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4491 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[8]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4490 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[7]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4489 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[6]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4488 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[5]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4487 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[4]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4486 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[3]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4485 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[2]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4484 ($adff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[1]).
Adding EN signal on $flatten\u_decodestage.\u_regfile0.$procdff$4483 ($dff) from module core (D = \u_decodestage.u_regfile0.data, Q = \u_decodestage.u_regfile0.register[0]).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 74 unused cells and 74 unused wires.
<suppressed ~75 debug messages>

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.9. Rerunning OPT passes. (Maybe there is more to do..)

45.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

45.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

45.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

45.13. Executing OPT_DFF pass (perform DFF optimizations).

45.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

45.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.16. Rerunning OPT passes. (Maybe there is more to do..)

45.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

45.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

45.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.20. Executing OPT_DFF pass (perform DFF optimizations).

45.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

45.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.23. Finished OPT passes. (There is nothing left to do.)

46. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell core.$flatten\u_fetchstage.\u_pc0.$add$/openlane/designs/processor/src/program_counter.v:31$18 ($add).
Removed top 1 bits (of 2) from port B of cell core.$auto$opt_dff.cc:195:make_patterns_logic$4533 ($ne).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:12$22 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:13$24 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:14$26 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:15$28 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:16$30 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:17$32 ($mux).
Removed top 2 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_branch0.$procmux$2091_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1373_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1374_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1375_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1376_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1377_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1378_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1379_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1380_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1381_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1382_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1383_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1384_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1385_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1386_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1387_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1406_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1407_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1408_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1409_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1410_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1411_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1412_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1413_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1414_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1415_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1416_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1417_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1418_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1419_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1420_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1646_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1668_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1691_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1715_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1740_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1766_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1793_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1821_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1850_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1880_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1911_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1943_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$1976_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$2010_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell core.$flatten\u_decodestage.\u_regfile0.$procmux$2045_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_mux0.$procmux$1352_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_mux0.$procmux$1353_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_mux0.$procmux$1354_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2212_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2196_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2177_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2174_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2168_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_typedec0.$procmux$2157_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$607 ($mux).
Removed top 2 bits (of 3) from mux cell core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$285 ($mux).
Removed top 1 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$eq$/openlane/designs/processor/src/control_decoder.v:120$168 ($eq).
Removed top 1 bits (of 3) from port B of cell core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$eq$/openlane/designs/processor/src/control_decoder.v:59$121 ($eq).
Removed top 3 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:14$62 ($eq).
Removed top 2 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:17$64 ($eq).
Removed top 2 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:20$66 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:23$68 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:26$70 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:29$72 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:32$74 ($eq).
Removed top 29 bits (of 32) from port B of cell core.$flatten\u_executestage.\u_adder0.$add$/openlane/designs/processor/src/adder.v:7$58 ($add).
Removed top 1 bits (of 2) from port B of cell core.$flatten\u_memorystage.\u_wrap_mem0.$procmux$1014_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell core.$flatten\u_memorystage.\u_wrap_mem0.$procmux$1124 ($pmux).
Removed top 2 bits (of 4) from mux cell core.$flatten\u_memorystage.\u_wrap_mem0.$procmux$1139 ($mux).
Removed top 1 bits (of 2) from port B of cell core.$flatten\u_wbstage.\u_mux2.$procmux$986_CMP0 ($eq).
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:12$22_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:13$24_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:14$26_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:15$28_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:16$30_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_decodestage.\u_branch0.$ternary$/openlane/designs/processor/src/branch.v:17$32_Y.
Removed top 3 bits (of 4) from wire core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$10\alu_control[3:0].
Removed top 2 bits (of 3) from wire core.$flatten\u_decodestage.\u_cu0.\u_controldec0.$5\imm_sel[2:0].
Removed top 31 bits (of 32) from wire core.$flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:21$67_Y.
Removed top 31 bits (of 32) from wire core.$flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:24$69_Y.
Removed top 2 bits (of 4) from wire core.$flatten\u_memorystage.\u_wrap_mem0.$2\masking[3:0].
Removed top 2 bits (of 4) from wire core.$flatten\u_memorystage.\u_wrap_mem0.$3\masking[3:0].

47. Executing PEEPOPT pass (run peephole optimizers).

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

49. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module core:
  creating $macc model for $flatten\u_executestage.\u_adder0.$add$/openlane/designs/processor/src/adder.v:7$58 ($add).
  creating $macc model for $flatten\u_executestage.\u_alu0.$add$/openlane/designs/processor/src/alu.v:12$61 ($add).
  creating $macc model for $flatten\u_executestage.\u_alu0.$sub$/openlane/designs/processor/src/alu.v:15$63 ($sub).
  creating $macc model for $flatten\u_fetchstage.\u_pc0.$add$/openlane/designs/processor/src/program_counter.v:31$18 ($add).
  creating $alu model for $macc $flatten\u_fetchstage.\u_pc0.$add$/openlane/designs/processor/src/program_counter.v:31$18.
  creating $alu model for $macc $flatten\u_executestage.\u_alu0.$sub$/openlane/designs/processor/src/alu.v:15$63.
  creating $alu model for $macc $flatten\u_executestage.\u_alu0.$add$/openlane/designs/processor/src/alu.v:12$61.
  creating $alu model for $macc $flatten\u_executestage.\u_adder0.$add$/openlane/designs/processor/src/adder.v:7$58.
  creating $alu model for $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:15$27 ($ge): new $alu
  creating $alu model for $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:17$31 ($ge): new $alu
  creating $alu model for $flatten\u_decodestage.\u_branch0.$lt$/openlane/designs/processor/src/branch.v:14$25 ($lt): merged with $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:15$27.
  creating $alu model for $flatten\u_decodestage.\u_branch0.$lt$/openlane/designs/processor/src/branch.v:16$29 ($lt): merged with $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:17$31.
  creating $alu model for $flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:21$67 ($lt): new $alu
  creating $alu model for $flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:24$69 ($lt): merged with $flatten\u_executestage.\u_alu0.$sub$/openlane/designs/processor/src/alu.v:15$63.
  creating $alu model for $flatten\u_decodestage.\u_branch0.$eq$/openlane/designs/processor/src/branch.v:12$21 ($eq): merged with $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:17$31.
  creating $alu model for $flatten\u_decodestage.\u_branch0.$ne$/openlane/designs/processor/src/branch.v:13$23 ($ne): merged with $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:17$31.
  creating $alu cell for $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:17$31, $flatten\u_decodestage.\u_branch0.$lt$/openlane/designs/processor/src/branch.v:16$29, $flatten\u_decodestage.\u_branch0.$eq$/openlane/designs/processor/src/branch.v:12$21, $flatten\u_decodestage.\u_branch0.$ne$/openlane/designs/processor/src/branch.v:13$23: $auto$alumacc.cc:485:replace_alu$4653
  creating $alu cell for $flatten\u_decodestage.\u_branch0.$ge$/openlane/designs/processor/src/branch.v:15$27, $flatten\u_decodestage.\u_branch0.$lt$/openlane/designs/processor/src/branch.v:14$25: $auto$alumacc.cc:485:replace_alu$4668
  creating $alu cell for $flatten\u_executestage.\u_adder0.$add$/openlane/designs/processor/src/adder.v:7$58: $auto$alumacc.cc:485:replace_alu$4683
  creating $alu cell for $flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:21$67: $auto$alumacc.cc:485:replace_alu$4686
  creating $alu cell for $flatten\u_executestage.\u_alu0.$add$/openlane/designs/processor/src/alu.v:12$61: $auto$alumacc.cc:485:replace_alu$4693
  creating $alu cell for $flatten\u_executestage.\u_alu0.$sub$/openlane/designs/processor/src/alu.v:15$63, $flatten\u_executestage.\u_alu0.$lt$/openlane/designs/processor/src/alu.v:24$69: $auto$alumacc.cc:485:replace_alu$4696
  creating $alu cell for $flatten\u_fetchstage.\u_pc0.$add$/openlane/designs/processor/src/program_counter.v:31$18: $auto$alumacc.cc:485:replace_alu$4701
  created 7 $alu and 0 $macc cells.

50. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module core that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\u_executestage.\u_alu0.$sshr$/openlane/designs/processor/src/alu.v:33$75 ($sshr):
    Found 1 activation_patterns using ctrl signal { $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:32$74_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:29$72_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:26$70_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:23$68_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:20$66_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:11$60_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:14$62_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:17$64_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\u_executestage.\u_alu0.$shr$/openlane/designs/processor/src/alu.v:30$73 ($shr):
    Found 1 activation_patterns using ctrl signal { $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:29$72_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:26$70_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:23$68_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:20$66_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:11$60_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:14$62_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:17$64_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\u_executestage.\u_alu0.$shl$/openlane/designs/processor/src/alu.v:18$65 ($shl):
    Found 1 activation_patterns using ctrl signal { $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:11$60_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:14$62_Y $flatten\u_executestage.\u_alu0.$eq$/openlane/designs/processor/src/alu.v:17$64_Y }.
    No candidates found.

51. Executing OPT pass (performing simple optimizations).

51.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~2 debug messages>

51.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

51.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

51.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

51.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

51.6. Executing OPT_DFF pass (perform DFF optimizations).

51.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

51.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

51.9. Rerunning OPT passes. (Maybe there is more to do..)

51.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

51.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

51.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

51.13. Executing OPT_DFF pass (perform DFF optimizations).

51.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

51.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

51.16. Finished OPT passes. (There is nothing left to do.)

52. Executing MEMORY pass.

52.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

52.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

52.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

52.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

52.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

52.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

52.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

52.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

52.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

52.10. Executing MEMORY_COLLECT pass (generating $mem cells).

53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

54. Executing OPT pass (performing simple optimizations).

54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~110 debug messages>

54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

54.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$4531 ($adffe) from module core (D = $flatten\u_fetchstage.\u_pc0.$0\address_out[31:0] [1:0], Q = \u_fetchstage.u_pc0.address_out [1:0]).

54.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 4 unused cells and 22 unused wires.
<suppressed ~5 debug messages>

54.5. Rerunning OPT passes. (Removed registers in this run.)

54.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~3 debug messages>

54.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

54.8. Executing OPT_DFF pass (perform DFF optimizations).

54.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 4 unused cells and 5 unused wires.
<suppressed ~5 debug messages>

54.10. Finished fast OPT passes.

55. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

56. Executing OPT pass (performing simple optimizations).

56.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

56.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

56.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

56.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$300:
      Old ports: A=2'10, B=2'00, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$5\mem_to_reg[1:0]
      New ports: A=1'1, B=1'0, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$5\mem_to_reg[1:0] [1]
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$5\mem_to_reg[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$489:
      Old ports: A={ 2'01 $auto$wreduce.cc:461:run$4645 [0] }, B=3'000, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$4\imm_sel[2:0]
      New ports: A={ 1'1 $auto$wreduce.cc:461:run$4645 [0] }, B=2'00, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$4\imm_sel[2:0] [1:0]
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$4\imm_sel[2:0] [2] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$637:
      Old ports: A={ 3'100 $auto$wreduce.cc:461:run$4644 [0] }, B=4'0111, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0]
      New ports: A={ 2'10 $auto$wreduce.cc:461:run$4644 [0] }, B=3'011, Y={ $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [3] $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [1:0] }
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [2] = $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [1]
    Consolidated identical input bits for $pmux cell $flatten\u_decodestage.\u_mux0.$procmux$1347:
      Old ports: A={ \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31:20] }, B={ \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31:25] \u_fetchpipeline.instruc [11:7] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [7] \u_fetchpipeline.instruc [30:25] \u_fetchpipeline.instruc [11:8] 1'0 \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [19:12] \u_fetchpipeline.instruc [20] \u_fetchpipeline.instruc [30:21] 1'0 \u_fetchpipeline.instruc [31:12] 12'000000000000 }, Y=\u_decodestage.u_mux2.b
      New ports: A={ \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31:20] }, B={ \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31:25] \u_fetchpipeline.instruc [11:7] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [7] \u_fetchpipeline.instruc [30:25] \u_fetchpipeline.instruc [11:8] 1'0 \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [31] \u_fetchpipeline.instruc [19:12] \u_fetchpipeline.instruc [20] \u_fetchpipeline.instruc [30:21] 1'0 \u_fetchpipeline.instruc [30:12] 12'000000000000 }, Y=\u_decodestage.u_mux2.b [30:0]
      New connections: \u_decodestage.u_mux2.b [31] = \u_fetchpipeline.instruc [31]
    Consolidated identical input bits for $pmux cell $flatten\u_memorystage.\u_wrap_mem0.$procmux$1092:
      Old ports: A={ 2'00 $auto$wreduce.cc:461:run$4648 [1:0] }, B=8'00110110, Y=$flatten\u_memorystage.\u_wrap_mem0.$5\masking[3:0]
      New ports: A={ 1'0 $auto$wreduce.cc:461:run$4648 [1:0] }, B=6'011110, Y=$flatten\u_memorystage.\u_wrap_mem0.$5\masking[3:0] [2:0]
      New connections: $flatten\u_memorystage.\u_wrap_mem0.$5\masking[3:0] [3] = 1'0
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$564:
      Old ports: A=$flatten\u_decodestage.\u_cu0.\u_controldec0.$4\imm_sel[2:0], B=3'001, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$3\imm_sel[2:0]
      New ports: A=$flatten\u_decodestage.\u_cu0.\u_controldec0.$4\imm_sel[2:0] [1:0], B=2'01, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$3\imm_sel[2:0] [1:0]
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$3\imm_sel[2:0] [2] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$664:
      Old ports: A=$flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0], B=4'0110, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$18\alu_control[3:0]
      New ports: A={ $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [3] $flatten\u_decodestage.\u_cu0.\u_controldec0.$19\alu_control[3:0] [1:0] }, B=3'010, Y={ $flatten\u_decodestage.\u_cu0.\u_controldec0.$18\alu_control[3:0] [3] $flatten\u_decodestage.\u_cu0.\u_controldec0.$18\alu_control[3:0] [1:0] }
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$18\alu_control[3:0] [2] = $flatten\u_decodestage.\u_cu0.\u_controldec0.$18\alu_control[3:0] [1]
    Consolidated identical input bits for $mux cell $flatten\u_memorystage.\u_wrap_mem0.$procmux$1107:
      Old ports: A={ 2'00 $auto$wreduce.cc:461:run$4648 [1:0] }, B=$flatten\u_memorystage.\u_wrap_mem0.$5\masking[3:0], Y=$flatten\u_memorystage.\u_wrap_mem0.$4\masking[3:0]
      New ports: A={ 1'0 $auto$wreduce.cc:461:run$4648 [1:0] }, B=$flatten\u_memorystage.\u_wrap_mem0.$5\masking[3:0] [2:0], Y=$flatten\u_memorystage.\u_wrap_mem0.$4\masking[3:0] [2:0]
      New connections: $flatten\u_memorystage.\u_wrap_mem0.$4\masking[3:0] [3] = 1'0
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\u_decodestage.\u_cu0.\u_controldec0.$procmux$774:
      Old ports: A=$flatten\u_decodestage.\u_cu0.\u_controldec0.$3\imm_sel[2:0], B=3'000, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$1\imm_sel[2:0]
      New ports: A=$flatten\u_decodestage.\u_cu0.\u_controldec0.$3\imm_sel[2:0] [1:0], B=2'00, Y=$flatten\u_decodestage.\u_cu0.\u_controldec0.$1\imm_sel[2:0] [1:0]
      New connections: $flatten\u_decodestage.\u_cu0.\u_controldec0.$1\imm_sel[2:0] [2] = 1'0
  Optimizing cells in module \core.
Performed a total of 9 changes.

56.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

56.6. Executing OPT_SHARE pass.

56.7. Executing OPT_DFF pass (perform DFF optimizations).

56.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

56.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

56.10. Rerunning OPT passes. (Maybe there is more to do..)

56.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

56.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

56.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

56.14. Executing OPT_SHARE pass.

56.15. Executing OPT_DFF pass (perform DFF optimizations).

56.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

56.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

56.18. Rerunning OPT passes. (Maybe there is more to do..)

56.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

56.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

56.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

56.22. Executing OPT_SHARE pass.

56.23. Executing OPT_DFF pass (perform DFF optimizations).

56.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

56.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

56.26. Finished OPT passes. (There is nothing left to do.)

57. Executing TECHMAP pass (map to technology primitives).

57.1. Executing Verilog-2005 frontend: /nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

57.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$c83925f608704c3fa34790ddcfce9302bdcd7533\_90_pmux for cells of type $pmux.
Using template $paramod$0ae36a7056fbae1b1191049d3533163e46c0843a\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$f5c0c5233796d8af9071458034942fe6bc61211e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
No more expansions possible.
<suppressed ~4000 debug messages>

58. Executing OPT pass (performing simple optimizations).

58.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1998 debug messages>

58.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~5781 debug messages>
Removed a total of 1927 cells.

58.3. Executing OPT_DFF pass (perform DFF optimizations).

58.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 162 unused cells and 2652 unused wires.
<suppressed ~163 debug messages>

58.5. Finished fast OPT passes.

59. Executing ABC pass (technology mapping using ABC).

59.1. Extracting gate netlist of module `\core' to `<abc-temp-dir>/input.blif'..
Replacing 2 occurrences of constant undef bits with constant zero bits
Extracted 7664 gates and 8895 wires to a netlist network with 1228 inputs and 222 outputs.

59.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

59.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      218
ABC RESULTS:               XOR cells:      166
ABC RESULTS:               AND cells:       89
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:               NOR cells:      237
ABC RESULTS:              NAND cells:       65
ABC RESULTS:               MUX cells:     1195
ABC RESULTS:             ORNOT cells:      190
ABC RESULTS:                OR cells:     2492
ABC RESULTS:            ANDNOT cells:     2897
ABC RESULTS:        internal signals:     7445
ABC RESULTS:           input signals:     1228
ABC RESULTS:          output signals:      222
Removing temp directory.

60. Executing OPT pass (performing simple optimizations).

60.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~444 debug messages>

60.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

60.3. Executing OPT_DFF pass (perform DFF optimizations).

60.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 1 unused cells and 2758 unused wires.
<suppressed ~43 debug messages>

60.5. Finished fast OPT passes.

61. Executing HIERARCHY pass (managing design hierarchy).

61.1. Analyzing design hierarchy..
Top module:  \core

61.2. Analyzing design hierarchy..
Top module:  \core
Removed 0 unused modules.

62. Printing statistics.

=== core ===

   Number of wires:               7726
   Number of wire bits:          11870
   Number of public wires:         231
   Number of public wire bits:    4375
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8794
     $_ANDNOT_                    2896
     $_AND_                         89
     $_DFFE_PN0N_                   30
     $_DFFE_PN0P_                  994
     $_DFFE_PP_                     64
     $_DFF_P_                        1
     $_DLATCH_N_                    74
     $_DLATCH_P_                     4
     $_MUX_                       1195
     $_NAND_                        65
     $_NOR_                        235
     $_NOT_                        216
     $_ORNOT_                      189
     $_OR_                        2492
     $_SDFFE_PP0N_                  64
     $_XNOR_                        20
     $_XOR_                        166

63. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

64. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/processor/runs/results_processor/tmp/synthesis/post_techmap.dot'.
Dumping module core to page 1.

65. Executing SHARE pass (SAT-based resource sharing).

66. Executing OPT pass (performing simple optimizations).

66.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

66.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

66.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

66.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

66.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

66.6. Executing OPT_DFF pass (perform DFF optimizations).

66.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

66.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

66.9. Finished OPT passes. (There is nothing left to do.)

67. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 171 unused wires.
<suppressed ~171 debug messages>

68. Printing statistics.

=== core ===

   Number of wires:               7555
   Number of wire bits:           8900
   Number of public wires:          60
   Number of public wire bits:    1405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8794
     $_ANDNOT_                    2896
     $_AND_                         89
     $_DFFE_PN0N_                   30
     $_DFFE_PN0P_                  994
     $_DFFE_PP_                     64
     $_DFF_P_                        1
     $_DLATCH_N_                    74
     $_DLATCH_P_                     4
     $_MUX_                       1195
     $_NAND_                        65
     $_NOR_                        235
     $_NOT_                        216
     $_ORNOT_                      189
     $_OR_                        2492
     $_SDFFE_PP0N_                  64
     $_XNOR_                        20
     $_XOR_                        166

mapping tbuf

69. Executing TECHMAP pass (map to technology primitives).

69.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

69.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

70. Executing SIMPLEMAP pass (map simple cells to gate primitives).

71. Executing TECHMAP pass (map to technology primitives).

71.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

71.2. Continuing TECHMAP pass.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
Using template \$_DLATCH_P_ for cells of type $_DLATCH_P_.
No more expansions possible.
<suppressed ~82 debug messages>

72. Executing SIMPLEMAP pass (map simple cells to gate primitives).

73. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

73.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\core':
  mapped 1024 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 129 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

74. Printing statistics.

=== core ===

   Number of wires:               9005
   Number of wire bits:          10350
   Number of public wires:          60
   Number of public wire bits:    1405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              10010
     $_ANDNOT_                    2896
     $_AND_                         89
     $_MUX_                       2411
     $_NAND_                        65
     $_NOR_                        235
     $_NOT_                        216
     $_ORNOT_                      189
     $_OR_                        2492
     $_XNOR_                        20
     $_XOR_                        166
     sky130_fd_sc_hd__dfrtp_2     1024
     sky130_fd_sc_hd__dfxtp_2      129
     sky130_fd_sc_hd__dlxtn_1       74
     sky130_fd_sc_hd__dlxtp_1        4

[INFO]: USING STRATEGY AREA 0

75. Executing ABC pass (technology mapping using ABC).

75.1. Extracting gate netlist of module `\core' to `/tmp/yosys-abc-un9LCT/input.blif'..
Extracted 8779 gates and 10074 wires to a netlist network with 1294 inputs and 1306 outputs.

75.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-un9LCT/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-un9LCT/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-un9LCT/input.blif 
ABC: + read_lib -w /openlane/designs/processor/runs/results_processor/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/processor/runs/results_processor/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    9.54 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/processor/runs/results_processor/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/processor/runs/results_processor/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (7440.04 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   5971 ( 29.4 %)   Cap = 11.3 ff (  7.2 %)   Area =    48086.12 ( 70.5 %)   Delay =  8221.35 ps  (  5.9 %)               
ABC: Path  0 --      88 : 0    8 pi                        A =   0.00  Df =  54.0  -29.9 ps  S =  80.9 ps  Cin =  0.0 ff  Cout =  16.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2610 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 310.8 -121.0 ps  S = 284.8 ps  Cin =  2.1 ff  Cout =  23.6 ff  Cmax = 130.0 ff  G = 1079  
ABC: Path  2 --    2667 : 4    7 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df = 615.8  -61.6 ps  S =  97.9 ps  Cin =  1.5 ff  Cout =  11.2 ff  Cmax = 270.1 ff  G =  710  
ABC: Path  3 --    2830 : 2    3 sky130_fd_sc_hd__and2b_2  A =   8.76  Df = 821.2 -104.0 ps  S =  55.5 ps  Cin =  1.6 ff  Cout =   7.2 ff  Cmax = 310.4 ff  G =  429  
ABC: Path  4 --    2832 : 5    1 sky130_fd_sc_hd__a221o_2  A =  11.26  Df =1184.6 -296.1 ps  S =  46.8 ps  Cin =  2.3 ff  Cout =   1.5 ff  Cmax = 299.4 ff  G =   61  
ABC: Path  5 --    2841 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1820.3 -811.8 ps  S =  90.0 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 310.4 ff  G =   89  
ABC: Path  6 --    2842 : 4    6 sky130_fd_sc_hd__or4_2    A =   8.76  Df =2448.0-1032.7 ps  S = 153.7 ps  Cin =  1.5 ff  Cout =  18.5 ff  Cmax = 310.4 ff  G = 1165  
ABC: Path  7 --    3938 : 3    9 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =2739.6 -161.0 ps  S = 152.2 ps  Cin =  2.4 ff  Cout =  27.0 ff  Cmax = 294.8 ff  G = 1083  
ABC: Path  8 --    4829 : 2    2 sky130_fd_sc_hd__or2_2    A =   6.26  Df =3050.6 -330.9 ps  S =  61.4 ps  Cin =  1.5 ff  Cout =   4.9 ff  Cmax = 299.4 ff  G =  324  
ABC: Path  9 --    4872 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =3258.1 -406.5 ps  S =  61.4 ps  Cin =  2.4 ff  Cout =   9.6 ff  Cmax = 309.5 ff  G =  385  
ABC: Path 10 --    4902 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =3480.8  -64.0 ps  S =  59.5 ps  Cin =  2.4 ff  Cout =   8.8 ff  Cmax = 309.5 ff  G =  351  
ABC: Path 11 --    4939 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =3819.9 -266.8 ps  S =  59.2 ps  Cin =  2.4 ff  Cout =   7.1 ff  Cmax = 325.0 ff  G =  288  
ABC: Path 12 --    4977 : 4    3 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =4085.8 -354.3 ps  S =  76.7 ps  Cin =  2.4 ff  Cout =  10.0 ff  Cmax = 271.9 ff  G =  405  
ABC: Path 13 --    5001 : 3    5 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =4338.2 -423.8 ps  S = 108.9 ps  Cin =  2.4 ff  Cout =  19.7 ff  Cmax = 309.5 ff  G =  800  
ABC: Path 14 --    5064 : 4    2 sky130_fd_sc_hd__a211oi_2 A =  12.51  Df =4515.2 -527.9 ps  S = 147.9 ps  Cin =  4.4 ff  Cout =   3.1 ff  Cmax =  88.8 ff  G =   68  
ABC: Path 15 --    5152 : 3    2 sky130_fd_sc_hd__and3b_2  A =  10.01  Df =4755.8 -516.5 ps  S =  73.3 ps  Cin =  1.5 ff  Cout =   9.2 ff  Cmax = 309.5 ff  G =  594  
ABC: Path 16 --    5211 : 3    2 sky130_fd_sc_hd__o21bai_2 A =  11.26  Df =4927.2 -421.5 ps  S = 152.3 ps  Cin =  3.4 ff  Cout =   9.1 ff  Cmax = 140.1 ff  G =  260  
ABC: Path 17 --    5298 : 4    2 sky130_fd_sc_hd__a211oi_2 A =  12.51  Df =5014.7 -313.0 ps  S = 167.3 ps  Cin =  4.4 ff  Cout =   4.3 ff  Cmax =  88.8 ff  G =   93  
ABC: Path 18 --    5301 : 4    4 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =5385.1 -484.7 ps  S =  78.8 ps  Cin =  2.3 ff  Cout =  11.3 ff  Cmax = 285.7 ff  G =  450  
ABC: Path 19 --    5369 : 5    2 sky130_fd_sc_hd__o311a_2  A =  11.26  Df =5735.0 -663.3 ps  S =  66.5 ps  Cin =  2.4 ff  Cout =   7.1 ff  Cmax = 293.9 ff  G =  288  
ABC: Path 20 --    5386 : 3    2 sky130_fd_sc_hd__o21ba_2  A =  10.01  Df =5960.4 -734.0 ps  S =  59.8 ps  Cin =  2.1 ff  Cout =   7.3 ff  Cmax = 264.6 ff  G =  332  
ABC: Path 21 --    5396 : 3    2 sky130_fd_sc_hd__o21ba_2  A =  10.01  Df =6159.2 -799.0 ps  S =  54.1 ps  Cin =  2.1 ff  Cout =   6.2 ff  Cmax = 264.6 ff  G =  283  
ABC: Path 22 --    5397 : 2    1 sky130_fd_sc_hd__or2_2    A =   6.26  Df =6450.6 -971.3 ps  S =  71.7 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 299.4 ff  G =  569  
ABC: Path 23 --    5398 : 2    1 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =6564.6 -963.0 ps  S =  96.1 ps  Cin =  8.5 ff  Cout =   2.4 ff  Cmax = 121.8 ff  G =   27  
ABC: Path 24 --    5409 : 3    1 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =6689.1 -887.7 ps  S =  33.6 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 309.5 ff  G =   98  
ABC: Path 25 --    5410 : 4    3 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =6911.8 -543.1 ps  S = 225.8 ps  Cin =  2.4 ff  Cout =  38.3 ff  Cmax = 271.9 ff  G = 1617  
ABC: Path 26 --    5824 : 5    6 sky130_fd_sc_hd__o221a_2  A =  11.26  Df =7176.3 -525.6 ps  S =  89.4 ps  Cin =  2.3 ff  Cout =  11.9 ff  Cmax = 281.1 ff  G =  486  
ABC: Path 27 --    5825 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =7639.8 -699.8 ps  S = 582.3 ps  Cin =  2.1 ff  Cout =  49.5 ff  Cmax = 130.0 ff  G = 2319  
ABC: Path 28 --    6044 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =7896.0 -609.6 ps  S =  49.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path 29 --    6045 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =8221.3 -716.1 ps  S = 397.1 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi87 (\u_decodestage.i_immo [0]).  End-point = po184 ($auto$rtlil.cc:2684:MuxGate$28362).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1294/ 1306  lat =    0  nd =  5971  edge =  15798  area =48082.55  delay =33.00  lev = 33
ABC: + write_blif /tmp/yosys-abc-un9LCT/output.blif 

75.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o41ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:      107
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       89
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       84
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       82
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       68
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      120
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:      568
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       57
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       46
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      118
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      173
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      457
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       83
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      256
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      119
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      158
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1250
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1635
ABC RESULTS:        internal signals:     7474
ABC RESULTS:           input signals:     1294
ABC RESULTS:          output signals:     1306
Removing temp directory.

76. Executing SETUNDEF pass (replace undef values with defined constants).

77. Executing HILOMAP pass (mapping to constant drivers).

78. Executing SPLITNETS pass (splitting up multi-bit signals).

79. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 100 unused cells and 10445 unused wires.
<suppressed ~166 debug messages>

80. Executing INSBUF pass (insert buffer cells for connected wires).

81. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

82. Printing statistics.

=== core ===

   Number of wires:               6983
   Number of wire bits:           7175
   Number of public wires:        1148
   Number of public wire bits:    1340
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7107
     sky130_fd_sc_hd__a2111o_2      32
     sky130_fd_sc_hd__a2111oi_2      2
     sky130_fd_sc_hd__a211o_2       89
     sky130_fd_sc_hd__a211oi_2      15
     sky130_fd_sc_hd__a21bo_2       12
     sky130_fd_sc_hd__a21o_2        83
     sky130_fd_sc_hd__a21oi_2       68
     sky130_fd_sc_hd__a221o_2      457
     sky130_fd_sc_hd__a22o_2       568
     sky130_fd_sc_hd__a22oi_2        9
     sky130_fd_sc_hd__a2bb2o_2      17
     sky130_fd_sc_hd__a311o_2        2
     sky130_fd_sc_hd__a31o_2        35
     sky130_fd_sc_hd__a31oi_2        3
     sky130_fd_sc_hd__a32o_2         4
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2       119
     sky130_fd_sc_hd__and2b_2       33
     sky130_fd_sc_hd__and3_2       158
     sky130_fd_sc_hd__and3b_2       23
     sky130_fd_sc_hd__and4_2        19
     sky130_fd_sc_hd__and4b_2       13
     sky130_fd_sc_hd__and4bb_2      13
     sky130_fd_sc_hd__buf_1       1600
     sky130_fd_sc_hd__conb_1         5
     sky130_fd_sc_hd__dfrtp_2     1024
     sky130_fd_sc_hd__dfxtp_2       97
     sky130_fd_sc_hd__dlxtn_1       74
     sky130_fd_sc_hd__dlxtp_1        4
     sky130_fd_sc_hd__inv_2        120
     sky130_fd_sc_hd__mux2_2      1218
     sky130_fd_sc_hd__nand2_2      173
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2        4
     sky130_fd_sc_hd__nand3b_2       4
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2       256
     sky130_fd_sc_hd__nor2b_2        6
     sky130_fd_sc_hd__nor3_2        12
     sky130_fd_sc_hd__nor3b_2        3
     sky130_fd_sc_hd__nor4_2        15
     sky130_fd_sc_hd__nor4b_2        3
     sky130_fd_sc_hd__o211a_2       84
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2        82
     sky130_fd_sc_hd__o21ai_2       57
     sky130_fd_sc_hd__o21ba_2       14
     sky130_fd_sc_hd__o21bai_2       7
     sky130_fd_sc_hd__o221a_2       18
     sky130_fd_sc_hd__o221ai_2       2
     sky130_fd_sc_hd__o22a_2        49
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2      17
     sky130_fd_sc_hd__o311a_2        3
     sky130_fd_sc_hd__o31a_2        15
     sky130_fd_sc_hd__o31ai_2        5
     sky130_fd_sc_hd__o32a_2         6
     sky130_fd_sc_hd__o32ai_2        1
     sky130_fd_sc_hd__o41ai_2        1
     sky130_fd_sc_hd__or2_2        118
     sky130_fd_sc_hd__or2b_2        10
     sky130_fd_sc_hd__or3_2         46
     sky130_fd_sc_hd__or3b_2        19
     sky130_fd_sc_hd__or4_2        107
     sky130_fd_sc_hd__or4b_2         6
     sky130_fd_sc_hd__or4bb_2        3
     sky130_fd_sc_hd__xnor2_2       27
     sky130_fd_sc_hd__xor2_2        10

   Chip area for module '\core': 77743.312000

83. Executing Verilog backend.
Dumping module `\core'.

84. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: f5a304d1af, CPU: user 5.48s system 0.08s, MEM: 85.08 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 85% 2x abc (29 sec), 3% 25x opt_clean (1 sec), ...
