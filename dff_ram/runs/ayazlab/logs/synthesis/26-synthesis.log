
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/dff_ram/src/dff_ram_4x72.v
Parsing SystemVerilog input from `/openlane/designs/dff_ram/src/dff_ram_4x72.v' to AST representation.
Storing AST representation for module `$abstract\dff_ram_4x72'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\dff_ram_4x72'.
Generating RTLIL representation for module `\dff_ram_4x72'.

4.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

4.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removing unused module `$abstract\dff_ram_4x72'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/hierarchy.dot'.
Dumping module dff_ram_4x72 to page 1.
Renaming module dff_ram_4x72 to dff_ram_4x72.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

7.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2 in module dff_ram_4x72.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
     1/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$13
     2/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_DATA[71:0]$12
     3/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_ADDR[1:0]$11
     4/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$9
     5/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_DATA[71:0]$8
     6/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_ADDR[1:0]$7
     7/7: $0\rdata[71:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff_ram_4x72.\rdata' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
  created $dff cell `$procdff$50' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_ADDR' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_DATA' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
  created $dff cell `$procdff$53' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
Removing empty process `dff_ram_4x72.$proc$/openlane/designs/dff_ram/src/dff_ram_4x72.v:12$2'.
Cleaned up 3 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~11 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 5 unused cells and 27 unused wires.
<suppressed ~6 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$19.
    dead port 1/2 on $mux $procmux$25.
    dead port 1/2 on $mux $procmux$31.
    dead port 2/2 on $mux $procmux$43.
Removed 4 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
    Consolidated identical input bits for $mux cell $procmux$17:
      Old ports: A=72'111111111111111111111111111111111111111111111111111111111111111111111111, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$17_Y
      New ports: A=1'1, B=1'0, Y=$procmux$17_Y [0]
      New connections: $procmux$17_Y [71:1] = { $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] $procmux$17_Y [0] }
  Optimizing cells in module \dff_ram_4x72.
    Consolidated identical input bits for $mux cell $procmux$34:
      Old ports: A=$2$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$13, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5
      New ports: A=$procmux$17_Y [0], B=1'0, Y=$0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0]
      New connections: $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [71:1] = { $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:15$1_EN[71:0]$5 [0] }
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 2 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$50 ($dff) from module dff_ram_4x72 (D = $memrd$\mem$/openlane/designs/dff_ram/src/dff_ram_4x72.v:18$14_DATA, Q = \rdata).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dff_ram_4x72:
  created 0 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing dff_ram_4x72.mem write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\mem'[0] in module `\dff_ram_4x72': merging output FF to cell.
    Write port 0: don't care on collision.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 1 unused cells and 73 unused wires.
<suppressed ~2 debug messages>

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~5 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \mem in module \dff_ram_4x72:
  created 4 $dff cells and 0 static cells of width 72.
Extracted data FF from read port 0 of dff_ram_4x72.mem: $\mem$rdreg[0]
  read interface: 1 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~5 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\mem[3]$139 ($dff) from module dff_ram_4x72 (D = \wdata, Q = \mem[3]).
Adding EN signal on $memory\mem[2]$137 ($dff) from module dff_ram_4x72 (D = \wdata, Q = \mem[2]).
Adding EN signal on $memory\mem[1]$135 ($dff) from module dff_ram_4x72 (D = \wdata, Q = \mem[1]).
Adding EN signal on $memory\mem[0]$133 ($dff) from module dff_ram_4x72 (D = \wdata, Q = \mem[0]).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
No more expansions possible.
<suppressed ~95 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\dff_ram_4x72' to `<abc-temp-dir>/input.blif'..
Extracted 230 gates and 523 wires to a netlist network with 292 inputs and 77 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:      216
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:        internal signals:      154
ABC RESULTS:           input signals:      292
ABC RESULTS:          output signals:       77
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~72 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 1 unused cells and 381 unused wires.
<suppressed ~2 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

42.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removed 0 unused modules.

43. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                165
   Number of wire bits:            663
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                586
     $_ANDNOT_                       5
     $_DFFE_PP_                    360
     $_MUX_                        216
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        2
     $_OR_                           1

44. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/post_techmap.dot'.
Dumping module dff_ram_4x72 to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

49. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                165
   Number of wire bits:            663
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                586
     $_ANDNOT_                       5
     $_DFFE_PP_                    360
     $_MUX_                        216
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        2
     $_OR_                           1

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dff_ram_4x72':
  mapped 360 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                525
   Number of wire bits:           1023
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                946
     $_ANDNOT_                       5
     $_MUX_                        576
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        2
     $_OR_                           1
     sky130_fd_sc_hd__dfxtp_2      360

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\dff_ram_4x72' to `/tmp/yosys-abc-rAKZVj/input.blif'..
Extracted 586 gates and 1022 wires to a netlist network with 436 inputs and 360 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-rAKZVj/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-rAKZVj/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-rAKZVj/input.blif 
ABC: + read_lib -w /openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/dff_ram/runs/ayazlab/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1547.01 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    894 ( 42.2 %)   Cap = 12.8 ff ( 11.2 %)   Area =     7113.07 ( 56.6 %)   Delay =  1952.46 ps  ( 16.8 %)               
ABC: Path  0 --       3 : 0    4 pi                        A =   0.00  Df =  24.3  -14.0 ps  S =  39.3 ps  Cin =  0.0 ff  Cout =   7.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     797 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 403.8 -172.8 ps  S = 481.2 ps  Cin =  2.1 ff  Cout =  40.8 ff  Cmax = 130.0 ff  G = 1846  
ABC: Path  2 --     799 : 4    1 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df = 692.9 -175.1 ps  S =  51.8 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 270.1 ff  G =  139  
ABC: Path  3 --     800 : 1    9 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 929.1 -250.7 ps  S = 266.1 ps  Cin =  2.1 ff  Cout =  22.0 ff  Cmax = 130.0 ff  G = 1005  
ABC: Path  4 --     801 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1295.4 -375.7 ps  S = 396.4 ps  Cin =  2.1 ff  Cout =  33.5 ff  Cmax = 130.0 ff  G = 1528  
ABC: Path  5 --     802 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =1631.6 -364.9 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  6 --     803 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1952.5 -466.9 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi2 (\address [0]).  End-point = po0 ($auto$rtlil.cc:2684:MuxGate$1085).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  436/  360  lat =    0  nd =   894  edge =   2187  area =7111.53  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-rAKZVj/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      299
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      377
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       61
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       61
ABC RESULTS:        internal signals:      226
ABC RESULTS:           input signals:      436
ABC RESULTS:          output signals:      360
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 1022 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Found and reported 0 problems.

63. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:               1188
   Number of wire bits:           1331
   Number of public wires:         294
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1254
     sky130_fd_sc_hd__a21o_2        14
     sky130_fd_sc_hd__a221o_2       61
     sky130_fd_sc_hd__a22o_2        47
     sky130_fd_sc_hd__and2_2         1
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2        14
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        377
     sky130_fd_sc_hd__dfxtp_2      360
     sky130_fd_sc_hd__mux2_2       299
     sky130_fd_sc_hd__mux4_2        11
     sky130_fd_sc_hd__nor2_2         1
     sky130_fd_sc_hd__o22a_2        61
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or4_2          1

   Chip area for module '\dff_ram_4x72': 14770.416000

64. Executing Verilog backend.
Dumping module `\dff_ram_4x72'.

65. Executing JSON backend.

End of script. Logfile hash: 71832c9ea3, CPU: user 0.84s system 0.04s, MEM: 43.00 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 60% 2x abc (1 sec), 9% 2x read_liberty (0 sec), ...
