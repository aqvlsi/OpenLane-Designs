
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/car_park/src/car_park.v
Parsing SystemVerilog input from `/openlane/designs/car_park/src/car_park.v' to AST representation.
Storing AST representation for module `$abstract\car_park'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\car_park'.
Generating RTLIL representation for module `\car_park'.

4.1. Analyzing design hierarchy..
Top module:  \car_park

4.2. Analyzing design hierarchy..
Top module:  \car_park
Removing unused module `$abstract\car_park'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/car_park/runs/ayyaz/tmp/synthesis/hierarchy.dot'.
Dumping module car_park to page 1.
Renaming module car_park to car_park.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \car_park

7.2. Analyzing design hierarchy..
Top module:  \car_park
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$15 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$13 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$11 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$9 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$7 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$5 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$3 in module car_park.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/car_park/src/car_park.v:13$1 in module car_park.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~8 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$15'.
     1/1: $1\parking_spaces[7:7]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$13'.
     1/1: $1\parking_spaces[6:6]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$11'.
     1/1: $1\parking_spaces[5:5]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$9'.
     1/1: $1\parking_spaces[4:4]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$7'.
     1/1: $1\parking_spaces[3:3]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$5'.
     1/1: $1\parking_spaces[2:2]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$3'.
     1/1: $1\parking_spaces[1:1]
Creating decoders for process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$1'.
     1/1: $1\parking_spaces[0:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\car_park.\parking_spaces [7]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$15'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [6]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$13'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [5]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$11'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [4]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$9'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [3]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$7'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [2]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$5'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [1]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$3'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\car_park.\parking_spaces [0]' using process `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$1'.
  created $dff cell `$procdff$48' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$15'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$15'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$13'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$13'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$11'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$11'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$9'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$9'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$7'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$7'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$5'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$5'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$3'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$3'.
Found and cleaned up 1 empty switch in `\car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$1'.
Removing empty process `car_park.$proc$/openlane/designs/car_park/src/car_park.v:13$1'.
Cleaned up 8 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module car_park...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$48 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$2_Y, Q = \parking_spaces [0]).
Adding EN signal on $procdff$47 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$4_Y, Q = \parking_spaces [1]).
Adding EN signal on $procdff$46 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$6_Y, Q = \parking_spaces [2]).
Adding EN signal on $procdff$45 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$8_Y, Q = \parking_spaces [3]).
Adding EN signal on $procdff$44 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$10_Y, Q = \parking_spaces [4]).
Adding EN signal on $procdff$43 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$12_Y, Q = \parking_spaces [5]).
Adding EN signal on $procdff$42 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$14_Y, Q = \parking_spaces [6]).
Adding EN signal on $procdff$41 ($dff) from module car_park (D = $not$/openlane/designs/car_park/src/car_park.v:15$16_Y, Q = \parking_spaces [7]).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module car_park:
  created 0 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffe.
No more expansions possible.
<suppressed ~89 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\car_park' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 8 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \car_park

42.2. Analyzing design hierarchy..
Top module:  \car_park
Removed 0 unused modules.

43. Printing statistics.

=== car_park ===

   Number of wires:                 11
   Number of wire bits:             25
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_DFFE_PP_                      8
     $_NOT_                          8

44. Executing CHECK pass (checking for obvious problems).
Checking module car_park...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/car_park/runs/ayyaz/tmp/synthesis/post_techmap.dot'.
Dumping module car_park to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \car_park..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \car_park.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\car_park'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module car_park.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..

49. Printing statistics.

=== car_park ===

   Number of wires:                 11
   Number of wire bits:             25
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_DFFE_PP_                      8
     $_NOT_                          8

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\car_park':
  mapped 8 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== car_park ===

   Number of wires:                 19
   Number of wire bits:             33
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     $_MUX_                          8
     $_NOT_                          8
     sky130_fd_sc_hd__dfxtp_2        8

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\car_park' to `/tmp/yosys-abc-x7bJj0/input.blif'..
Extracted 16 gates and 32 wires to a netlist network with 16 inputs and 8 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-x7bJj0/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-x7bJj0/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-x7bJj0/input.blif 
ABC: + read_lib -w /openlane/designs/car_park/runs/ayyaz/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/car_park/runs/ayyaz/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.08 sec
ABC: Memory =    9.54 MB. Time =     0.08 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/car_park/runs/ayyaz/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/car_park/runs/ayyaz/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (414.16 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =      8 (  0.0 %)   Cap = 16.9 ff (  0.0 %)   Area =      130.12 (100.0 %)   Delay =   414.16 ps  (100.0 %)               
ABC: Path  0 --       1 : 0    1 pi                      A =   0.00  Df =  31.9  -18.1 ps  S =  49.9 ps  Cin =  0.0 ff  Cout =   9.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      25 : 2    1 sky130_fd_sc_hd__xor2_2 A =  16.27  Df = 414.2 -174.6 ps  S = 429.0 ps  Cin =  8.6 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G =  390  
ABC: Start-point = pi0 (\parking_spaces [0]).  End-point = po0 ($auto$rtlil.cc:2684:MuxGate$161).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   16/    8  lat =    0  nd =     8  edge =     16  area =130.16  delay = 1.00  lev = 1
ABC: + write_blif /tmp/yosys-abc-x7bJj0/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        8
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        8
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \car_park..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module car_park...
Found and reported 0 problems.

63. Printing statistics.

=== car_park ===

   Number of wires:                 11
   Number of wire bits:             25
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     sky130_fd_sc_hd__dfxtp_2        8
     sky130_fd_sc_hd__xor2_2         8

   Chip area for module '\car_park': 300.288000

64. Executing Verilog backend.
Dumping module `\car_park'.

65. Executing JSON backend.

End of script. Logfile hash: fd9140c79c, CPU: user 0.52s system 0.04s, MEM: 42.62 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 35% 2x abc (0 sec), 21% 2x read_liberty (0 sec), ...
